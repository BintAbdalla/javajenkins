pipeline {
    agent any

    tools {
        // Utilisation de Maven et Java 17
        maven "maven"      
        jdk "jdk17"
    }

    environment {
        DOCKER_HUB_USER = "bintabdallah"
        IMAGE_NAME = "javajenkins"
        DEPLOY_PORT = "8080"   
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/BintAbdalla/javajenkins.git',
                    credentialsId: 'github-credentials-java'
            }
        }

        stage('Build') {
            steps {
                echo 'üì¶ Compilation et packaging du projet Java avec Maven...'
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Test') {
            steps {
                echo '‚ö†Ô∏è Aucun test d√©fini, stage ignor√©'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    def image = docker.build("${DOCKER_HUB_USER}/${IMAGE_NAME}:${env.BUILD_NUMBER}")
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                        image.push()
                        image.push("latest")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'üöÄ D√©ploiement en cours...'

                    sh """
                        if [ \$(docker ps -aq -f name=${IMAGE_NAME}) ]; then
                            echo "Arr√™t du container existant..."
                            docker stop ${IMAGE_NAME} || true
                            docker rm ${IMAGE_NAME} || true
                            echo "Container existant supprim√©"
                        fi
                    """

                    def deployPort = env.DEPLOY_PORT

                    def port8080Used = sh(
                        script: "lsof -i:8080 > /dev/null 2>&1",
                        returnStatus: true
                    ) == 0

                    if (port8080Used) {
                        echo "‚ö†Ô∏è Port 8080 occup√©, tentative sur le port 8081"
                        def port8081Used = sh(
                            script: "lsof -i:8081 > /dev/null 2>&1",
                            returnStatus: true
                        ) == 0
                        
                        deployPort = port8081Used ? "8082" : "8081"
                        echo "üìç D√©ploiement sur le port ${deployPort}"
                    }

                    sh """
                        echo "Lancement du container Java sur le port ${deployPort}..."
                        docker run -d -p ${deployPort}:8080 --name ${IMAGE_NAME} ${DOCKER_HUB_USER}/${IMAGE_NAME}:latest
                        
                        echo "Attente du d√©marrage du container..."
                        sleep 5
                        
                        if docker ps | grep ${IMAGE_NAME} > /dev/null; then
                            echo "‚úÖ Container Java d√©marr√© avec succ√®s"
                            docker ps | grep ${IMAGE_NAME}
                            docker logs ${IMAGE_NAME} --tail 10
                        else
                            echo "‚ùå Erreur lors du d√©marrage du container"
                            docker logs ${IMAGE_NAME} 2>/dev/null || echo "Aucun log disponible"
                            exit 1
                        fi
                    """

                    sh """
                        echo "üîç Test de connectivit√©..."
                        sleep 3
                        if curl -f http://localhost:${deployPort} > /dev/null 2>&1; then
                            echo "‚úÖ Application Java r√©pond correctement"
                        else
                            echo "‚ö†Ô∏è L'application ne r√©pond pas encore (peut n√©cessiter plus de temps)"
                        fi
                    """
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Nettoyage de l'espace de travail..."
            cleanWs()
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
            echo 'üéâ L\'application Java a √©t√© d√©ploy√©e correctement'
        }
        failure {
            echo '‚ùå Pipeline √©chou√© !'
            script {
                echo "üßπ Nettoyage des containers en cas d'√©chec..."
                sh """
                    if [ \$(docker ps -aq -f name=${IMAGE_NAME}) ]; then
                        docker stop ${IMAGE_NAME} || true
                        docker rm ${IMAGE_NAME} || true
                        echo "Nettoyage termin√©"
                    fi
                """
            }
        }
    }
}
